// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package scauri

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type ImmutableAddPPToFractionResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableAddPPToFractionResults) FracID() wasmtypes.ScImmutableHash {
	return wasmtypes.NewScImmutableHash(s.proxy.Root(ResultFracID))
}

func (s ImmutableAddPPToFractionResults) Pp() ImmutableProductPass {
	return ImmutableProductPass{proxy: s.proxy.Root(ResultPp)}
}

type MutableAddPPToFractionResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableAddPPToFractionResults) FracID() wasmtypes.ScMutableHash {
	return wasmtypes.NewScMutableHash(s.proxy.Root(ResultFracID))
}

func (s MutableAddPPToFractionResults) Pp() MutableProductPass {
	return MutableProductPass{proxy: s.proxy.Root(ResultPp)}
}

type ImmutableCreateFractionResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableCreateFractionResults) FracID() wasmtypes.ScImmutableHash {
	return wasmtypes.NewScImmutableHash(s.proxy.Root(ResultFracID))
}

type MutableCreateFractionResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableCreateFractionResults) FracID() wasmtypes.ScMutableHash {
	return wasmtypes.NewScMutableHash(s.proxy.Root(ResultFracID))
}

type ImmutableCreatePPResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableCreatePPResults) Id() wasmtypes.ScImmutableHash {
	return wasmtypes.NewScImmutableHash(s.proxy.Root(ResultId))
}

type MutableCreatePPResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableCreatePPResults) Id() wasmtypes.ScMutableHash {
	return wasmtypes.NewScMutableHash(s.proxy.Root(ResultId))
}

type ImmutableCreateRecyclateResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableCreateRecyclateResults) Fraction() ImmutableFraction {
	return ImmutableFraction{proxy: s.proxy.Root(ResultFraction)}
}

func (s ImmutableCreateRecyclateResults) RecyclateID() wasmtypes.ScImmutableHash {
	return wasmtypes.NewScImmutableHash(s.proxy.Root(ResultRecyclateID))
}

type MutableCreateRecyclateResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableCreateRecyclateResults) Fraction() MutableFraction {
	return MutableFraction{proxy: s.proxy.Root(ResultFraction)}
}

func (s MutableCreateRecyclateResults) RecyclateID() wasmtypes.ScMutableHash {
	return wasmtypes.NewScMutableHash(s.proxy.Root(ResultRecyclateID))
}

type ImmutableDeletePPResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableDeletePPResults) Pp() ImmutableProductPass {
	return ImmutableProductPass{proxy: s.proxy.Root(ResultPp)}
}

type MutableDeletePPResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableDeletePPResults) Pp() MutableProductPass {
	return MutableProductPass{proxy: s.proxy.Root(ResultPp)}
}

type ImmutableGetAmountOfRequiredFundsResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetAmountOfRequiredFundsResults) TokenRequired() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(ResultTokenRequired))
}

type MutableGetAmountOfRequiredFundsResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetAmountOfRequiredFundsResults) TokenRequired() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(ResultTokenRequired))
}

type ImmutableGetMaterialsResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetMaterialsResults) Compositions() ImmutableCompositions {
	return ImmutableCompositions{proxy: s.proxy.Root(ResultCompositions)}
}

type MutableGetMaterialsResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetMaterialsResults) Compositions() MutableCompositions {
	return MutableCompositions{proxy: s.proxy.Root(ResultCompositions)}
}

type ImmutableGetOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetOwnerResults) Owner() wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(s.proxy.Root(ResultOwner))
}

type MutableGetOwnerResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetOwnerResults) Owner() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(s.proxy.Root(ResultOwner))
}

type ImmutableGetPPResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetPPResults) Ppname() wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(s.proxy.Root(ResultPpname))
}

func (s ImmutableGetPPResults) Ppresult() ImmutableProductPass {
	return ImmutableProductPass{proxy: s.proxy.Root(ResultPpresult)}
}

type MutableGetPPResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetPPResults) Ppname() wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(s.proxy.Root(ResultPpname))
}

func (s MutableGetPPResults) Ppresult() MutableProductPass {
	return MutableProductPass{proxy: s.proxy.Root(ResultPpresult)}
}

type ImmutableGetTokenPerPackageResults struct {
	proxy wasmtypes.Proxy
}

func (s ImmutableGetTokenPerPackageResults) TokenPerPackage() wasmtypes.ScImmutableUint64 {
	return wasmtypes.NewScImmutableUint64(s.proxy.Root(ResultTokenPerPackage))
}

type MutableGetTokenPerPackageResults struct {
	proxy wasmtypes.Proxy
}

func (s MutableGetTokenPerPackageResults) TokenPerPackage() wasmtypes.ScMutableUint64 {
	return wasmtypes.NewScMutableUint64(s.proxy.Root(ResultTokenPerPackage))
}
