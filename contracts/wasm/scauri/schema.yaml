name: scauri
description: scauri description
events: {}
structs:
  ProductPass:
    id: Hash
    did: String //merged did:iota:id
    name: String
    issuer: AgentID //packaging producer
    version: Uint8
    purpose: String    //e.g. food, hygiene, others
    chargeWeight: Uint64
    packageWeight: Uint64
    totalPackages: Uint64
    packagesSorted: Uint64
    packagesWrongSorted: Uint64
    packagesAlreadyPaid: Uint64
    amountPerCharge: Uint64
    rewardPerPackageProducer: Uint64
    rewardPerPackageRecycler: Uint64
    lastProducerPayout: Uint64
    activationDate: Uint64
    expiryDate: Uint64
    recyclateShare: Uint8
  Composition:
    material: String
    proportion: Uint8
  Fraction:
    fracId: Hash
    did: String
    name: String
    purpose: String
    issuer: AgentID
    amount: Uint64
  FracComposition:
    material: String
    weight: Uint64 //in mg
  Recyclate:
    recyId: Hash
    did: String
    name: String
    purpose: String
    issuer: AgentID
    amount: Uint64
    fracId: Hash
  RecyComposition:
    material: String
    weight: Uint64 //in mg
typedefs:
  Compositions: Composition[]
  FracCompositions: FracComposition[]
  RecyCompositions: RecyComposition[]
state:
  owner: AgentID // current owner of this smart contract
  productpasses: map[Hash]ProductPass
  compositions: map[Hash]Compositions
  shareRecycler: Uint8
  pricePerMg: Uint64
  fractions: map[Hash]Fraction
  fracCompositions: map[Hash]FracCompositions
  recyclates: map[Hash]Recyclate
  recyCompositions: map[Hash]RecyCompositions
  donationAddress: AgentID
  tokenToDonate: Uint64
funcs:
  init:
    params:
      owner: AgentID? // optional owner of this smart contract
  createPP:
    params: 
      name: String
      purpose: String
      expiryDate: Uint64
      recyclateShare: Uint8
    results:
      id: Hash
  setMaterials:
    params:
      id: Hash
      comp: Compositions?
  setOwner:
    access: owner // current owner of this smart contract
    params:
      owner: AgentID // new owner of this smart contract
  createFraction:
    params:
      name: String?
      purpose: String
    results:
      fracID: Hash
  addPPToFraction:
    params:
      ppID: Hash
      fracID: Hash
    results:
      pp: ProductPass
      fracID: Hash
  createRecyclate:
    params:
      fracID: Hash
      name: String?
    results:
      fraction: Fraction
      recyclateID: Hash
  payoutProducer:
    params:
      fracID: Hash
  deletePP:
    params:
      ppID: Hash
    results:
      pp: ProductPass
views:
  getPP:
    params: 
      id: Hash
    results: 
      ppresult: ProductPass
      ppname: String
  getMaterials:
    params:
      id: Hash
    results:
      compositions: Compositions
  getOwner:
    results:
      owner: AgentID // current owner of this smart contract
  getAmountOfRequiredFunds:
    params: 
      chargeWeight: Uint64
    results:
      tokenRequired: Uint64
  getTokenPerPackage:
    params:
      prodPass: ProductPass
    results: 
      tokenPerPackage: Uint64